{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "310adb0d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:12.741182Z",
     "iopub.status.busy": "2022-01-11T11:29:12.740039Z",
     "iopub.status.idle": "2022-01-11T11:29:12.755531Z",
     "shell.execute_reply": "2022-01-11T11:29:12.756189Z",
     "shell.execute_reply.started": "2022-01-11T10:40:59.584103Z"
    },
    "papermill": {
     "duration": 0.039161,
     "end_time": "2022-01-11T11:29:12.756503",
     "exception": false,
     "start_time": "2022-01-11T11:29:12.717342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/nlp-getting-started/sample_submission.csv\n",
      "/kaggle/input/nlp-getting-started/train.csv\n",
      "/kaggle/input/nlp-getting-started/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3b401af7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:12.796406Z",
     "iopub.status.busy": "2022-01-11T11:29:12.795746Z",
     "iopub.status.idle": "2022-01-11T11:29:12.874001Z",
     "shell.execute_reply": "2022-01-11T11:29:12.874540Z",
     "shell.execute_reply.started": "2022-01-11T10:40:59.598362Z"
    },
    "papermill": {
     "duration": 0.099348,
     "end_time": "2022-01-11T11:29:12.874735",
     "exception": false,
     "start_time": "2022-01-11T11:29:12.775387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>keyword</th>\n",
       "      <th>location</th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Our Deeds are the Reason of this #earthquake M...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Forest fire near La Ronge Sask. Canada</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>All residents asked to 'shelter in place' are ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13,000 people receive #wildfires evacuation or...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>137</td>\n",
       "      <td>accident</td>\n",
       "      <td>Charlotte</td>\n",
       "      <td>9 Mile backup on I-77 South...accident blockin...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>138</td>\n",
       "      <td>accident</td>\n",
       "      <td>Baton Rouge, LA</td>\n",
       "      <td>Has an accident changed your life? We will hel...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>139</td>\n",
       "      <td>accident</td>\n",
       "      <td>Hagerstown, MD</td>\n",
       "      <td>#BREAKING: there was a deadly motorcycle car a...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>141</td>\n",
       "      <td>accident</td>\n",
       "      <td>Gloucestershire , UK</td>\n",
       "      <td>@flowri were you marinading it or was it an ac...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>143</td>\n",
       "      <td>accident</td>\n",
       "      <td>NaN</td>\n",
       "      <td>only had a car for not even a week and got in ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     id   keyword              location  \\\n",
       "0     1       NaN                   NaN   \n",
       "1     4       NaN                   NaN   \n",
       "2     5       NaN                   NaN   \n",
       "3     6       NaN                   NaN   \n",
       "4     7       NaN                   NaN   \n",
       "..  ...       ...                   ...   \n",
       "95  137  accident             Charlotte   \n",
       "96  138  accident       Baton Rouge, LA   \n",
       "97  139  accident        Hagerstown, MD   \n",
       "98  141  accident  Gloucestershire , UK   \n",
       "99  143  accident                   NaN   \n",
       "\n",
       "                                                 text  target  \n",
       "0   Our Deeds are the Reason of this #earthquake M...       1  \n",
       "1              Forest fire near La Ronge Sask. Canada       1  \n",
       "2   All residents asked to 'shelter in place' are ...       1  \n",
       "3   13,000 people receive #wildfires evacuation or...       1  \n",
       "4   Just got sent this photo from Ruby #Alaska as ...       1  \n",
       "..                                                ...     ...  \n",
       "95  9 Mile backup on I-77 South...accident blockin...       1  \n",
       "96  Has an accident changed your life? We will hel...       0  \n",
       "97  #BREAKING: there was a deadly motorcycle car a...       1  \n",
       "98  @flowri were you marinading it or was it an ac...       0  \n",
       "99  only had a car for not even a week and got in ...       1  \n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/nlp-getting-started/train.csv')\n",
    "df.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0dc335d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:12.914967Z",
     "iopub.status.busy": "2022-01-11T11:29:12.913900Z",
     "iopub.status.idle": "2022-01-11T11:29:14.037199Z",
     "shell.execute_reply": "2022-01-11T11:29:14.036503Z",
     "shell.execute_reply.started": "2022-01-11T11:07:47.039877Z"
    },
    "papermill": {
     "duration": 1.144667,
     "end_time": "2022-01-11T11:29:14.037337",
     "exception": false,
     "start_time": "2022-01-11T11:29:12.892670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>keyword</th>\n",
       "      <th>location</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5836</th>\n",
       "      <td>rubble</td>\n",
       "      <td>Dallas, Tejas</td>\n",
       "      <td>Photo: postapocalypticflimflam: Prodding aroun...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The end!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1879</th>\n",
       "      <td>crush</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Man crush everyday ????  @CristianInspire http...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6852</th>\n",
       "      <td>trauma</td>\n",
       "      <td>I rap to burn shame.</td>\n",
       "      <td>@PTSD_Chat Yes. I feel the root of that is Sha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2673</th>\n",
       "      <td>detonate</td>\n",
       "      <td>Sharkatraz/Bindle's Cleft, PA</td>\n",
       "      <td>@AutoAmes everyone hoped we would join ISIS an...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       keyword                       location  \\\n",
       "5836    rubble                  Dallas, Tejas   \n",
       "30         NaN                            NaN   \n",
       "1879     crush                            NaN   \n",
       "6852    trauma           I rap to burn shame.   \n",
       "2673  detonate  Sharkatraz/Bindle's Cleft, PA   \n",
       "\n",
       "                                                   text  \n",
       "5836  Photo: postapocalypticflimflam: Prodding aroun...  \n",
       "30                                             The end!  \n",
       "1879  Man crush everyday ????  @CristianInspire http...  \n",
       "6852  @PTSD_Chat Yes. I feel the root of that is Sha...  \n",
       "2673  @AutoAmes everyone hoped we would join ISIS an...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X,y = df[['keyword','location','text']],df['target']\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33,random_state = 42)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "34669395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:14.077540Z",
     "iopub.status.busy": "2022-01-11T11:29:14.076824Z",
     "iopub.status.idle": "2022-01-11T11:29:14.089504Z",
     "shell.execute_reply": "2022-01-11T11:29:14.090095Z",
     "shell.execute_reply.started": "2022-01-11T11:07:52.754333Z"
    },
    "papermill": {
     "duration": 0.034509,
     "end_time": "2022-01-11T11:29:14.090266",
     "exception": false,
     "start_time": "2022-01-11T11:29:14.055757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>keyword</th>\n",
       "      <th>location</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2644</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2227</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5448</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6845</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>485</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2239</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3653</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3469</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6111</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2513 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      keyword  location   text\n",
       "2644    False      True  False\n",
       "2227    False      True  False\n",
       "5448    False     False  False\n",
       "132     False      True  False\n",
       "6845    False     False  False\n",
       "...       ...       ...    ...\n",
       "485     False     False  False\n",
       "2239    False     False  False\n",
       "3653    False     False  False\n",
       "3469    False     False  False\n",
       "6111    False     False  False\n",
       "\n",
       "[2513 rows x 3 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f4d77080",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:14.131729Z",
     "iopub.status.busy": "2022-01-11T11:29:14.130736Z",
     "iopub.status.idle": "2022-01-11T11:29:14.702843Z",
     "shell.execute_reply": "2022-01-11T11:29:14.703303Z",
     "shell.execute_reply.started": "2022-01-11T11:07:57.816758Z"
    },
    "papermill": {
     "duration": 0.594316,
     "end_time": "2022-01-11T11:29:14.703487",
     "exception": false,
     "start_time": "2022-01-11T11:29:14.109171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.heatmap(X_train.isna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8072802",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:14.747064Z",
     "iopub.status.busy": "2022-01-11T11:29:14.746458Z",
     "iopub.status.idle": "2022-01-11T11:29:14.754040Z",
     "shell.execute_reply": "2022-01-11T11:29:14.754529Z",
     "shell.execute_reply.started": "2022-01-11T11:07:59.74248Z"
    },
    "papermill": {
     "duration": 0.030932,
     "end_time": "2022-01-11T11:29:14.754710",
     "exception": false,
     "start_time": "2022-01-11T11:29:14.723778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5836    Photo: postapocalypticflimflam: Prodding aroun...\n",
       "30                                               The end!\n",
       "1879    Man crush everyday ????  @CristianInspire http...\n",
       "6852    @PTSD_Chat Yes. I feel the root of that is Sha...\n",
       "2673    @AutoAmes everyone hoped we would join ISIS an...\n",
       "2818    .POTUS #StrategicPatience is a strategy for #G...\n",
       "4522                                Stream HYPE HURRICANE\n",
       "5500    Reddit's new content policy goes into effect m...\n",
       "5198    God the @mets are so cocky right now and I lov...\n",
       "3861    @ErinMariefishy everyone is setting flames upo...\n",
       "Name: text, dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['text'].iloc[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "175e340c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:14.803696Z",
     "iopub.status.busy": "2022-01-11T11:29:14.802848Z",
     "iopub.status.idle": "2022-01-11T11:29:15.376348Z",
     "shell.execute_reply": "2022-01-11T11:29:15.375796Z",
     "shell.execute_reply.started": "2022-01-11T11:08:04.353476Z"
    },
    "papermill": {
     "duration": 0.60141,
     "end_time": "2022-01-11T11:29:15.376522",
     "exception": false,
     "start_time": "2022-01-11T11:29:14.775112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "import re\n",
    "from nltk.stem import PorterStemmer\n",
    "stopword = set(stopwords.words('english'))\n",
    "ps = PorterStemmer()\n",
    "\n",
    "def preprocess(text):\n",
    "    text = text.lower()\n",
    "    # remove urls\n",
    "    text = re.sub(r'http\\S+','',text)\n",
    "    # remove usernames\n",
    "    text = re.sub(r'@\\S+','',text)\n",
    "    # remove punctuations\n",
    "    text = re.sub(r':|\\.|\\?|#|;|-|>|<|=','',text)\n",
    "    \n",
    "    # removing stopwords\n",
    "    words = word_tokenize(text)\n",
    "    words = [word for word in words if not word in stopword]\n",
    "    \n",
    "    # stemming each word\n",
    "    words = [ps.stem(word) for word in words]\n",
    "    \n",
    "    return words\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9c347a63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:15.424177Z",
     "iopub.status.busy": "2022-01-11T11:29:15.423505Z",
     "iopub.status.idle": "2022-01-11T11:29:15.441703Z",
     "shell.execute_reply": "2022-01-11T11:29:15.442179Z",
     "shell.execute_reply.started": "2022-01-11T11:08:08.935383Z"
    },
    "papermill": {
     "duration": 0.045041,
     "end_time": "2022-01-11T11:29:15.442359",
     "exception": false,
     "start_time": "2022-01-11T11:29:15.397318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['photo', 'postapocalypticflimflam', 'prod', 'around', 'rubbl'] Photo: postapocalypticflimflam: Prodding around the rubble. http://t.co/Bgy4i47j70 0\n"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "print(preprocess(X_train['text'].iloc[i]),X_train['text'].iloc[i],y_train.iloc[i])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "49cfb176",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:15.489706Z",
     "iopub.status.busy": "2022-01-11T11:29:15.487533Z",
     "iopub.status.idle": "2022-01-11T11:29:15.492054Z",
     "shell.execute_reply": "2022-01-11T11:29:15.491438Z",
     "shell.execute_reply.started": "2022-01-11T11:08:11.225415Z"
    },
    "papermill": {
     "duration": 0.028155,
     "end_time": "2022-01-11T11:29:15.492188",
     "exception": false,
     "start_time": "2022-01-11T11:29:15.464033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_train = y_train.tolist()\n",
    "# X_train = X_train.tolist()\n",
    "# X_test = X_test.tolist()\n",
    "y_test = y_test.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c2825ced",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:15.546720Z",
     "iopub.status.busy": "2022-01-11T11:29:15.545920Z",
     "iopub.status.idle": "2022-01-11T11:29:19.904652Z",
     "shell.execute_reply": "2022-01-11T11:29:19.903991Z",
     "shell.execute_reply.started": "2022-01-11T11:08:16.01919Z"
    },
    "papermill": {
     "duration": 4.391753,
     "end_time": "2022-01-11T11:29:19.904796",
     "exception": false,
     "start_time": "2022-01-11T11:29:15.513043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10367"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l = []\n",
    "vocab = []\n",
    "for text in X_train['text']:\n",
    "    x = preprocess(text)\n",
    "    l.append(x)\n",
    "    for word in x:\n",
    "        if word not in vocab:\n",
    "            vocab.append(word)\n",
    "        \n",
    "X_train = l\n",
    "len(vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "94edded4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:20.083364Z",
     "iopub.status.busy": "2022-01-11T11:29:20.082321Z",
     "iopub.status.idle": "2022-01-11T11:29:20.117877Z",
     "shell.execute_reply": "2022-01-11T11:29:20.118360Z",
     "shell.execute_reply.started": "2022-01-11T10:48:50.768302Z"
    },
    "papermill": {
     "duration": 0.191095,
     "end_time": "2022-01-11T11:29:20.118560",
     "exception": false,
     "start_time": "2022-01-11T11:29:19.927465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "freqs = {}\n",
    "def count_freqs(text,y):\n",
    "    for word in text:\n",
    "        pair = (word,y)\n",
    "        if pair in freqs.keys():\n",
    "            freqs[pair] += 1\n",
    "        else:\n",
    "            freqs[pair] = 1\n",
    "    return freqs\n",
    "\n",
    "for text,y in zip(X_train,y_train):\n",
    "    freqs = count_freqs(text,y)\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e2435bbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:20.179482Z",
     "iopub.status.busy": "2022-01-11T11:29:20.163256Z",
     "iopub.status.idle": "2022-01-11T11:29:20.283430Z",
     "shell.execute_reply": "2022-01-11T11:29:20.284322Z",
     "shell.execute_reply.started": "2022-01-11T10:50:13.542645Z"
    },
    "papermill": {
     "duration": 0.14528,
     "end_time": "2022-01-11T11:29:20.284626",
     "exception": false,
     "start_time": "2022-01-11T11:29:20.139346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_train_class = [0,0]\n",
    "for i in y_train:\n",
    "    if i == 0:\n",
    "        y_train_class[0] += 1\n",
    "    elif i == 1:\n",
    "        y_train_class[1] += 1\n",
    "\n",
    "# y_train_class\n",
    "plt.pie(y_train_class,labels =y_train_class)\n",
    "plt.legend(labels = ['no disaster','disaster'],loc = 'center right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "92e45e8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:20.369034Z",
     "iopub.status.busy": "2022-01-11T11:29:20.368357Z",
     "iopub.status.idle": "2022-01-11T11:29:20.374915Z",
     "shell.execute_reply": "2022-01-11T11:29:20.375475Z",
     "shell.execute_reply.started": "2022-01-11T10:51:11.123753Z"
    },
    "papermill": {
     "duration": 0.05098,
     "end_time": "2022-01-11T11:29:20.375662",
     "exception": false,
     "start_time": "2022-01-11T11:29:20.324682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.567843137254902, 0.432156862745098]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prob_y = [count/len(y_train) for count in y_train_class]\n",
    "prob_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "08ce70ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:20.423022Z",
     "iopub.status.busy": "2022-01-11T11:29:20.422331Z",
     "iopub.status.idle": "2022-01-11T11:29:20.429451Z",
     "shell.execute_reply": "2022-01-11T11:29:20.430047Z",
     "shell.execute_reply.started": "2022-01-11T10:59:29.33038Z"
    },
    "papermill": {
     "duration": 0.032468,
     "end_time": "2022-01-11T11:29:20.430226",
     "exception": false,
     "start_time": "2022-01-11T11:29:20.397758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from math import log\n",
    "\n",
    "\n",
    "# count P(w_i | y = 1) and P(w_i | y = 0)\n",
    "def count_word_prob(word,class_prob = y_train_class,vocab = vocab):\n",
    "    pair = (word,0)\n",
    "    cnt = 0\n",
    "    if pair in freqs.keys():\n",
    "        cnt = freqs[pair]\n",
    "    # laplacian smoothing alpha = 1 and k = len(vocab) \n",
    "    prob0 = (cnt + 1) / (class_prob[0] + len(vocab))\n",
    "    \n",
    "    \n",
    "    pair = (word,1)\n",
    "    cnt = 0\n",
    "    if pair in freqs.keys():\n",
    "        cnt = freqs[pair]\n",
    "    # laplacian smoothing alpha = 1 and k = len(vocab) \n",
    "    prob1 = (cnt + 1) / (class_prob[1] + len(vocab))\n",
    "    \n",
    "    return log(prob0),log(prob1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "76f45867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:20.480139Z",
     "iopub.status.busy": "2022-01-11T11:29:20.479437Z",
     "iopub.status.idle": "2022-01-11T11:29:21.801879Z",
     "shell.execute_reply": "2022-01-11T11:29:21.802474Z",
     "shell.execute_reply.started": "2022-01-11T11:08:34.283933Z"
    },
    "papermill": {
     "duration": 1.349156,
     "end_time": "2022-01-11T11:29:21.802655",
     "exception": false,
     "start_time": "2022-01-11T11:29:20.453499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "l_test = []\n",
    "for text in X_test['text']:\n",
    "    l_test.append(preprocess(text))\n",
    "X_test = l_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "65fcbc17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:21.852560Z",
     "iopub.status.busy": "2022-01-11T11:29:21.851842Z",
     "iopub.status.idle": "2022-01-11T11:29:21.856846Z",
     "shell.execute_reply": "2022-01-11T11:29:21.857443Z",
     "shell.execute_reply.started": "2022-01-11T11:08:39.323978Z"
    },
    "papermill": {
     "duration": 0.031939,
     "end_time": "2022-01-11T11:29:21.857622",
     "exception": false,
     "start_time": "2022-01-11T11:29:21.825683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict(text):\n",
    "    prob0,prob1 = log(y_train_class[0]),log(y_train_class[1])\n",
    "    for word in text:\n",
    "        p = count_word_prob(word)\n",
    "        prob0 += p[0]\n",
    "        prob1 += p[1]\n",
    "    \n",
    "    return int(p[0] > p[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c1dfd72f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:21.911249Z",
     "iopub.status.busy": "2022-01-11T11:29:21.905461Z",
     "iopub.status.idle": "2022-01-11T11:29:21.974286Z",
     "shell.execute_reply": "2022-01-11T11:29:21.973725Z",
     "shell.execute_reply.started": "2022-01-11T11:08:53.028712Z"
    },
    "papermill": {
     "duration": 0.093819,
     "end_time": "2022-01-11T11:29:21.974454",
     "exception": false,
     "start_time": "2022-01-11T11:29:21.880635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2513"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat = []\n",
    "for text in X_test:\n",
    "    y_hat.append(predict(text))\n",
    "len(y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9088bebb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:22.026252Z",
     "iopub.status.busy": "2022-01-11T11:29:22.025597Z",
     "iopub.status.idle": "2022-01-11T11:29:22.028129Z",
     "shell.execute_reply": "2022-01-11T11:29:22.027575Z",
     "shell.execute_reply.started": "2022-01-11T11:10:35.256615Z"
    },
    "papermill": {
     "duration": 0.031039,
     "end_time": "2022-01-11T11:29:22.028273",
     "exception": false,
     "start_time": "2022-01-11T11:29:21.997234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_hat = np.array(y_hat)\n",
    "y_test = np.array(y_test)\n",
    "accuracy = np.sum(y_hat == y_test) / len(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "15077226",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-11T11:29:22.076339Z",
     "iopub.status.busy": "2022-01-11T11:29:22.075733Z",
     "iopub.status.idle": "2022-01-11T11:29:22.080718Z",
     "shell.execute_reply": "2022-01-11T11:29:22.081274Z",
     "shell.execute_reply.started": "2022-01-11T11:10:35.562669Z"
    },
    "papermill": {
     "duration": 0.03042,
     "end_time": "2022-01-11T11:29:22.081455",
     "exception": false,
     "start_time": "2022-01-11T11:29:22.051035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3748507759649821"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4edbdaef",
   "metadata": {
    "papermill": {
     "duration": 0.023074,
     "end_time": "2022-01-11T11:29:22.128021",
     "exception": false,
     "start_time": "2022-01-11T11:29:22.104947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 20.618083,
   "end_time": "2022-01-11T11:29:22.960890",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-01-11T11:29:02.342807",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
